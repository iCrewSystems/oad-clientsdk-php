<?php
/**
 * Aircraft
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Open Aviation Data
 *
 * Accessible Aviation Data for the Masses
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * Aircraft Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Aircraft implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Aircraft';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'aircraft' => '\Swagger\Client\Model\AircraftAircraft',
        'takeoff' => '\Swagger\Client\Model\AircraftTakeoff',
        'initial_climb' => '\Swagger\Client\Model\AircraftClimbPhase',
        'climb1' => '\Swagger\Client\Model\AircraftClimbPhase',
        'climb2' => '\Swagger\Client\Model\AircraftClimbPhase',
        'mach_climb' => '\Swagger\Client\Model\AircraftMachClimb',
        'cruise' => '\Swagger\Client\Model\AircraftCruise',
        'initial_descent' => '\Swagger\Client\Model\AircraftInitialDescent',
        'descent' => '\Swagger\Client\Model\AircraftDescent',
        'approach' => '\Swagger\Client\Model\AircraftApproach',
        'landing' => '\Swagger\Client\Model\AircraftLanding'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'aircraft' => 'aircraft',
        'takeoff' => 'takeoff',
        'initial_climb' => 'initial_climb',
        'climb1' => 'climb1',
        'climb2' => 'climb2',
        'mach_climb' => 'mach_climb',
        'cruise' => 'cruise',
        'initial_descent' => 'initial_descent',
        'descent' => 'descent',
        'approach' => 'approach',
        'landing' => 'landing'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'aircraft' => 'setAircraft',
        'takeoff' => 'setTakeoff',
        'initial_climb' => 'setInitialClimb',
        'climb1' => 'setClimb1',
        'climb2' => 'setClimb2',
        'mach_climb' => 'setMachClimb',
        'cruise' => 'setCruise',
        'initial_descent' => 'setInitialDescent',
        'descent' => 'setDescent',
        'approach' => 'setApproach',
        'landing' => 'setLanding'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'aircraft' => 'getAircraft',
        'takeoff' => 'getTakeoff',
        'initial_climb' => 'getInitialClimb',
        'climb1' => 'getClimb1',
        'climb2' => 'getClimb2',
        'mach_climb' => 'getMachClimb',
        'cruise' => 'getCruise',
        'initial_descent' => 'getInitialDescent',
        'descent' => 'getDescent',
        'approach' => 'getApproach',
        'landing' => 'getLanding'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['aircraft'] = isset($data['aircraft']) ? $data['aircraft'] : null;
        $this->container['takeoff'] = isset($data['takeoff']) ? $data['takeoff'] : null;
        $this->container['initial_climb'] = isset($data['initial_climb']) ? $data['initial_climb'] : null;
        $this->container['climb1'] = isset($data['climb1']) ? $data['climb1'] : null;
        $this->container['climb2'] = isset($data['climb2']) ? $data['climb2'] : null;
        $this->container['mach_climb'] = isset($data['mach_climb']) ? $data['mach_climb'] : null;
        $this->container['cruise'] = isset($data['cruise']) ? $data['cruise'] : null;
        $this->container['initial_descent'] = isset($data['initial_descent']) ? $data['initial_descent'] : null;
        $this->container['descent'] = isset($data['descent']) ? $data['descent'] : null;
        $this->container['approach'] = isset($data['approach']) ? $data['approach'] : null;
        $this->container['landing'] = isset($data['landing']) ? $data['landing'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets aircraft
     * @return \Swagger\Client\Model\AircraftAircraft
     */
    public function getAircraft()
    {
        return $this->container['aircraft'];
    }

    /**
     * Sets aircraft
     * @param \Swagger\Client\Model\AircraftAircraft $aircraft
     * @return $this
     */
    public function setAircraft($aircraft)
    {
        $this->container['aircraft'] = $aircraft;

        return $this;
    }

    /**
     * Gets takeoff
     * @return \Swagger\Client\Model\AircraftTakeoff
     */
    public function getTakeoff()
    {
        return $this->container['takeoff'];
    }

    /**
     * Sets takeoff
     * @param \Swagger\Client\Model\AircraftTakeoff $takeoff
     * @return $this
     */
    public function setTakeoff($takeoff)
    {
        $this->container['takeoff'] = $takeoff;

        return $this;
    }

    /**
     * Gets initial_climb
     * @return \Swagger\Client\Model\AircraftClimbPhase
     */
    public function getInitialClimb()
    {
        return $this->container['initial_climb'];
    }

    /**
     * Sets initial_climb
     * @param \Swagger\Client\Model\AircraftClimbPhase $initial_climb
     * @return $this
     */
    public function setInitialClimb($initial_climb)
    {
        $this->container['initial_climb'] = $initial_climb;

        return $this;
    }

    /**
     * Gets climb1
     * @return \Swagger\Client\Model\AircraftClimbPhase
     */
    public function getClimb1()
    {
        return $this->container['climb1'];
    }

    /**
     * Sets climb1
     * @param \Swagger\Client\Model\AircraftClimbPhase $climb1
     * @return $this
     */
    public function setClimb1($climb1)
    {
        $this->container['climb1'] = $climb1;

        return $this;
    }

    /**
     * Gets climb2
     * @return \Swagger\Client\Model\AircraftClimbPhase
     */
    public function getClimb2()
    {
        return $this->container['climb2'];
    }

    /**
     * Sets climb2
     * @param \Swagger\Client\Model\AircraftClimbPhase $climb2
     * @return $this
     */
    public function setClimb2($climb2)
    {
        $this->container['climb2'] = $climb2;

        return $this;
    }

    /**
     * Gets mach_climb
     * @return \Swagger\Client\Model\AircraftMachClimb
     */
    public function getMachClimb()
    {
        return $this->container['mach_climb'];
    }

    /**
     * Sets mach_climb
     * @param \Swagger\Client\Model\AircraftMachClimb $mach_climb
     * @return $this
     */
    public function setMachClimb($mach_climb)
    {
        $this->container['mach_climb'] = $mach_climb;

        return $this;
    }

    /**
     * Gets cruise
     * @return \Swagger\Client\Model\AircraftCruise
     */
    public function getCruise()
    {
        return $this->container['cruise'];
    }

    /**
     * Sets cruise
     * @param \Swagger\Client\Model\AircraftCruise $cruise
     * @return $this
     */
    public function setCruise($cruise)
    {
        $this->container['cruise'] = $cruise;

        return $this;
    }

    /**
     * Gets initial_descent
     * @return \Swagger\Client\Model\AircraftInitialDescent
     */
    public function getInitialDescent()
    {
        return $this->container['initial_descent'];
    }

    /**
     * Sets initial_descent
     * @param \Swagger\Client\Model\AircraftInitialDescent $initial_descent
     * @return $this
     */
    public function setInitialDescent($initial_descent)
    {
        $this->container['initial_descent'] = $initial_descent;

        return $this;
    }

    /**
     * Gets descent
     * @return \Swagger\Client\Model\AircraftDescent
     */
    public function getDescent()
    {
        return $this->container['descent'];
    }

    /**
     * Sets descent
     * @param \Swagger\Client\Model\AircraftDescent $descent
     * @return $this
     */
    public function setDescent($descent)
    {
        $this->container['descent'] = $descent;

        return $this;
    }

    /**
     * Gets approach
     * @return \Swagger\Client\Model\AircraftApproach
     */
    public function getApproach()
    {
        return $this->container['approach'];
    }

    /**
     * Sets approach
     * @param \Swagger\Client\Model\AircraftApproach $approach
     * @return $this
     */
    public function setApproach($approach)
    {
        $this->container['approach'] = $approach;

        return $this;
    }

    /**
     * Gets landing
     * @return \Swagger\Client\Model\AircraftLanding
     */
    public function getLanding()
    {
        return $this->container['landing'];
    }

    /**
     * Sets landing
     * @param \Swagger\Client\Model\AircraftLanding $landing
     * @return $this
     */
    public function setLanding($landing)
    {
        $this->container['landing'] = $landing;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}
