<?php
/**
 * NOTAM
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Open Aviation Data
 *
 * Accessible Aviation Data for the Masses
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * NOTAM Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class NOTAM implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'NOTAM';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'issuer' => 'string',
        'facility_icao' => 'string',
        'facility_name' => 'string',
        'id' => 'string',
        'part' => 'string',
        'part_total' => 'string',
        'start' => 'string',
        'end' => 'string',
        'modified' => 'string',
        'text' => 'string',
        'report' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'issuer' => 'issuer',
        'facility_icao' => 'facility_icao',
        'facility_name' => 'facility_name',
        'id' => 'id',
        'part' => 'part',
        'part_total' => 'part_total',
        'start' => 'start',
        'end' => 'end',
        'modified' => 'modified',
        'text' => 'text',
        'report' => 'report'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'issuer' => 'setIssuer',
        'facility_icao' => 'setFacilityIcao',
        'facility_name' => 'setFacilityName',
        'id' => 'setId',
        'part' => 'setPart',
        'part_total' => 'setPartTotal',
        'start' => 'setStart',
        'end' => 'setEnd',
        'modified' => 'setModified',
        'text' => 'setText',
        'report' => 'setReport'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'issuer' => 'getIssuer',
        'facility_icao' => 'getFacilityIcao',
        'facility_name' => 'getFacilityName',
        'id' => 'getId',
        'part' => 'getPart',
        'part_total' => 'getPartTotal',
        'start' => 'getStart',
        'end' => 'getEnd',
        'modified' => 'getModified',
        'text' => 'getText',
        'report' => 'getReport'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['issuer'] = isset($data['issuer']) ? $data['issuer'] : null;
        $this->container['facility_icao'] = isset($data['facility_icao']) ? $data['facility_icao'] : null;
        $this->container['facility_name'] = isset($data['facility_name']) ? $data['facility_name'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['part'] = isset($data['part']) ? $data['part'] : null;
        $this->container['part_total'] = isset($data['part_total']) ? $data['part_total'] : null;
        $this->container['start'] = isset($data['start']) ? $data['start'] : null;
        $this->container['end'] = isset($data['end']) ? $data['end'] : null;
        $this->container['modified'] = isset($data['modified']) ? $data['modified'] : null;
        $this->container['text'] = isset($data['text']) ? $data['text'] : null;
        $this->container['report'] = isset($data['report']) ? $data['report'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets issuer
     * @return string
     */
    public function getIssuer()
    {
        return $this->container['issuer'];
    }

    /**
     * Sets issuer
     * @param string $issuer Issuing Facility ICAO
     * @return $this
     */
    public function setIssuer($issuer)
    {
        $this->container['issuer'] = $issuer;

        return $this;
    }

    /**
     * Gets facility_icao
     * @return string
     */
    public function getFacilityIcao()
    {
        return $this->container['facility_icao'];
    }

    /**
     * Sets facility_icao
     * @param string $facility_icao Applicable Facility ICAO
     * @return $this
     */
    public function setFacilityIcao($facility_icao)
    {
        $this->container['facility_icao'] = $facility_icao;

        return $this;
    }

    /**
     * Gets facility_name
     * @return string
     */
    public function getFacilityName()
    {
        return $this->container['facility_name'];
    }

    /**
     * Sets facility_name
     * @param string $facility_name Applicable Facility Name
     * @return $this
     */
    public function setFacilityName($facility_name)
    {
        $this->container['facility_name'] = $facility_name;

        return $this;
    }

    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id NOTAM Identifier
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets part
     * @return string
     */
    public function getPart()
    {
        return $this->container['part'];
    }

    /**
     * Sets part
     * @param string $part NOTAM Part Number (for Multi-Part NOTAMs)
     * @return $this
     */
    public function setPart($part)
    {
        $this->container['part'] = $part;

        return $this;
    }

    /**
     * Gets part_total
     * @return string
     */
    public function getPartTotal()
    {
        return $this->container['part_total'];
    }

    /**
     * Sets part_total
     * @param string $part_total Total number of NOTAM Parts(for Multi-Part NOTAMs)
     * @return $this
     */
    public function setPartTotal($part_total)
    {
        $this->container['part_total'] = $part_total;

        return $this;
    }

    /**
     * Gets start
     * @return string
     */
    public function getStart()
    {
        return $this->container['start'];
    }

    /**
     * Sets start
     * @param string $start Effective Datetime (ISO8601)
     * @return $this
     */
    public function setStart($start)
    {
        $this->container['start'] = $start;

        return $this;
    }

    /**
     * Gets end
     * @return string
     */
    public function getEnd()
    {
        return $this->container['end'];
    }

    /**
     * Sets end
     * @param string $end Expiration Datetime (ISO8601)
     * @return $this
     */
    public function setEnd($end)
    {
        $this->container['end'] = $end;

        return $this;
    }

    /**
     * Gets modified
     * @return string
     */
    public function getModified()
    {
        return $this->container['modified'];
    }

    /**
     * Sets modified
     * @param string $modified Last Modified Datetime (ISO8601)
     * @return $this
     */
    public function setModified($modified)
    {
        $this->container['modified'] = $modified;

        return $this;
    }

    /**
     * Gets text
     * @return string
     */
    public function getText()
    {
        return $this->container['text'];
    }

    /**
     * Sets text
     * @param string $text NOTAM Text (Raw)
     * @return $this
     */
    public function setText($text)
    {
        $this->container['text'] = $text;

        return $this;
    }

    /**
     * Gets report
     * @return string
     */
    public function getReport()
    {
        return $this->container['report'];
    }

    /**
     * Sets report
     * @param string $report NOTAM Text (Report)
     * @return $this
     */
    public function setReport($report)
    {
        $this->container['report'] = $report;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}
