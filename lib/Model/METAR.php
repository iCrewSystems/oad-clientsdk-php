<?php
/**
 * METAR
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Open Aviation Data
 *
 * Accessible Aviation Data for the Masses
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * METAR Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class METAR implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'METAR';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'station' => 'string',
        'observation_time' => 'string',
        'coordinates' => 'object',
        'tmp' => 'string',
        'dewpt' => 'string',
        'wind' => '\Swagger\Client\Model\METARWind',
        'visibility' => 'string',
        'altimeter' => 'string',
        'pressure' => 'string',
        'wx_string' => 'string',
        'sky_conditions' => '\Swagger\Client\Model\SkyConditions[]',
        'category' => 'string',
        '_3hr' => '\Swagger\Client\Model\METAR3hr',
        '_6hr' => '\Swagger\Client\Model\METAR6hr',
        '_24hr' => '\Swagger\Client\Model\METAR24hr',
        'precip_sincelast' => 'int',
        'precip_snow' => 'int',
        'type' => 'string',
        'elevation' => 'string',
        'raw' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'station' => 'station',
        'observation_time' => 'observation_time',
        'coordinates' => 'coordinates',
        'tmp' => 'tmp',
        'dewpt' => 'dewpt',
        'wind' => 'wind',
        'visibility' => 'visibility',
        'altimeter' => 'altimeter',
        'pressure' => 'pressure',
        'wx_string' => 'wx_string',
        'sky_conditions' => 'sky_conditions',
        'category' => 'category',
        '_3hr' => '3hr',
        '_6hr' => '6hr',
        '_24hr' => '24hr',
        'precip_sincelast' => 'precip_sincelast',
        'precip_snow' => 'precip_snow',
        'type' => 'type',
        'elevation' => 'elevation',
        'raw' => 'raw'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'station' => 'setStation',
        'observation_time' => 'setObservationTime',
        'coordinates' => 'setCoordinates',
        'tmp' => 'setTmp',
        'dewpt' => 'setDewpt',
        'wind' => 'setWind',
        'visibility' => 'setVisibility',
        'altimeter' => 'setAltimeter',
        'pressure' => 'setPressure',
        'wx_string' => 'setWxString',
        'sky_conditions' => 'setSkyConditions',
        'category' => 'setCategory',
        '_3hr' => 'set3hr',
        '_6hr' => 'set6hr',
        '_24hr' => 'set24hr',
        'precip_sincelast' => 'setPrecipSincelast',
        'precip_snow' => 'setPrecipSnow',
        'type' => 'setType',
        'elevation' => 'setElevation',
        'raw' => 'setRaw'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'station' => 'getStation',
        'observation_time' => 'getObservationTime',
        'coordinates' => 'getCoordinates',
        'tmp' => 'getTmp',
        'dewpt' => 'getDewpt',
        'wind' => 'getWind',
        'visibility' => 'getVisibility',
        'altimeter' => 'getAltimeter',
        'pressure' => 'getPressure',
        'wx_string' => 'getWxString',
        'sky_conditions' => 'getSkyConditions',
        'category' => 'getCategory',
        '_3hr' => 'get3hr',
        '_6hr' => 'get6hr',
        '_24hr' => 'get24hr',
        'precip_sincelast' => 'getPrecipSincelast',
        'precip_snow' => 'getPrecipSnow',
        'type' => 'getType',
        'elevation' => 'getElevation',
        'raw' => 'getRaw'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['station'] = isset($data['station']) ? $data['station'] : null;
        $this->container['observation_time'] = isset($data['observation_time']) ? $data['observation_time'] : null;
        $this->container['coordinates'] = isset($data['coordinates']) ? $data['coordinates'] : null;
        $this->container['tmp'] = isset($data['tmp']) ? $data['tmp'] : null;
        $this->container['dewpt'] = isset($data['dewpt']) ? $data['dewpt'] : null;
        $this->container['wind'] = isset($data['wind']) ? $data['wind'] : null;
        $this->container['visibility'] = isset($data['visibility']) ? $data['visibility'] : null;
        $this->container['altimeter'] = isset($data['altimeter']) ? $data['altimeter'] : null;
        $this->container['pressure'] = isset($data['pressure']) ? $data['pressure'] : null;
        $this->container['wx_string'] = isset($data['wx_string']) ? $data['wx_string'] : null;
        $this->container['sky_conditions'] = isset($data['sky_conditions']) ? $data['sky_conditions'] : null;
        $this->container['category'] = isset($data['category']) ? $data['category'] : null;
        $this->container['_3hr'] = isset($data['_3hr']) ? $data['_3hr'] : null;
        $this->container['_6hr'] = isset($data['_6hr']) ? $data['_6hr'] : null;
        $this->container['_24hr'] = isset($data['_24hr']) ? $data['_24hr'] : null;
        $this->container['precip_sincelast'] = isset($data['precip_sincelast']) ? $data['precip_sincelast'] : null;
        $this->container['precip_snow'] = isset($data['precip_snow']) ? $data['precip_snow'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['elevation'] = isset($data['elevation']) ? $data['elevation'] : null;
        $this->container['raw'] = isset($data['raw']) ? $data['raw'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets station
     * @return string
     */
    public function getStation()
    {
        return $this->container['station'];
    }

    /**
     * Sets station
     * @param string $station Station Identifier
     * @return $this
     */
    public function setStation($station)
    {
        $this->container['station'] = $station;

        return $this;
    }

    /**
     * Gets observation_time
     * @return string
     */
    public function getObservationTime()
    {
        return $this->container['observation_time'];
    }

    /**
     * Sets observation_time
     * @param string $observation_time Datetime METAR Observed (ISO8601)
     * @return $this
     */
    public function setObservationTime($observation_time)
    {
        $this->container['observation_time'] = $observation_time;

        return $this;
    }

    /**
     * Gets coordinates
     * @return object
     */
    public function getCoordinates()
    {
        return $this->container['coordinates'];
    }

    /**
     * Sets coordinates
     * @param object $coordinates
     * @return $this
     */
    public function setCoordinates($coordinates)
    {
        $this->container['coordinates'] = $coordinates;

        return $this;
    }

    /**
     * Gets tmp
     * @return string
     */
    public function getTmp()
    {
        return $this->container['tmp'];
    }

    /**
     * Sets tmp
     * @param string $tmp Air Temperature (Celcius)
     * @return $this
     */
    public function setTmp($tmp)
    {
        $this->container['tmp'] = $tmp;

        return $this;
    }

    /**
     * Gets dewpt
     * @return string
     */
    public function getDewpt()
    {
        return $this->container['dewpt'];
    }

    /**
     * Sets dewpt
     * @param string $dewpt Dewpoint Temperature (Celcius)
     * @return $this
     */
    public function setDewpt($dewpt)
    {
        $this->container['dewpt'] = $dewpt;

        return $this;
    }

    /**
     * Gets wind
     * @return \Swagger\Client\Model\METARWind
     */
    public function getWind()
    {
        return $this->container['wind'];
    }

    /**
     * Sets wind
     * @param \Swagger\Client\Model\METARWind $wind
     * @return $this
     */
    public function setWind($wind)
    {
        $this->container['wind'] = $wind;

        return $this;
    }

    /**
     * Gets visibility
     * @return string
     */
    public function getVisibility()
    {
        return $this->container['visibility'];
    }

    /**
     * Sets visibility
     * @param string $visibility Horizontal visibility (SM)
     * @return $this
     */
    public function setVisibility($visibility)
    {
        $this->container['visibility'] = $visibility;

        return $this;
    }

    /**
     * Gets altimeter
     * @return string
     */
    public function getAltimeter()
    {
        return $this->container['altimeter'];
    }

    /**
     * Sets altimeter
     * @param string $altimeter Altimeter (inches of Hg)
     * @return $this
     */
    public function setAltimeter($altimeter)
    {
        $this->container['altimeter'] = $altimeter;

        return $this;
    }

    /**
     * Gets pressure
     * @return string
     */
    public function getPressure()
    {
        return $this->container['pressure'];
    }

    /**
     * Sets pressure
     * @param string $pressure Sea-level pressure (mb)
     * @return $this
     */
    public function setPressure($pressure)
    {
        $this->container['pressure'] = $pressure;

        return $this;
    }

    /**
     * Gets wx_string
     * @return string
     */
    public function getWxString()
    {
        return $this->container['wx_string'];
    }

    /**
     * Sets wx_string
     * @param string $wx_string WX String Descriptions
     * @return $this
     */
    public function setWxString($wx_string)
    {
        $this->container['wx_string'] = $wx_string;

        return $this;
    }

    /**
     * Gets sky_conditions
     * @return \Swagger\Client\Model\SkyConditions[]
     */
    public function getSkyConditions()
    {
        return $this->container['sky_conditions'];
    }

    /**
     * Sets sky_conditions
     * @param \Swagger\Client\Model\SkyConditions[] $sky_conditions
     * @return $this
     */
    public function setSkyConditions($sky_conditions)
    {
        $this->container['sky_conditions'] = $sky_conditions;

        return $this;
    }

    /**
     * Gets category
     * @return string
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     * @param string $category Flight category of METAR (can be VFR, MVFR, IFR, LIFR)
     * @return $this
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets _3hr
     * @return \Swagger\Client\Model\METAR3hr
     */
    public function get3hr()
    {
        return $this->container['_3hr'];
    }

    /**
     * Sets _3hr
     * @param \Swagger\Client\Model\METAR3hr $_3hr
     * @return $this
     */
    public function set3hr($_3hr)
    {
        $this->container['_3hr'] = $_3hr;

        return $this;
    }

    /**
     * Gets _6hr
     * @return \Swagger\Client\Model\METAR6hr
     */
    public function get6hr()
    {
        return $this->container['_6hr'];
    }

    /**
     * Sets _6hr
     * @param \Swagger\Client\Model\METAR6hr $_6hr
     * @return $this
     */
    public function set6hr($_6hr)
    {
        $this->container['_6hr'] = $_6hr;

        return $this;
    }

    /**
     * Gets _24hr
     * @return \Swagger\Client\Model\METAR24hr
     */
    public function get24hr()
    {
        return $this->container['_24hr'];
    }

    /**
     * Sets _24hr
     * @param \Swagger\Client\Model\METAR24hr $_24hr
     * @return $this
     */
    public function set24hr($_24hr)
    {
        $this->container['_24hr'] = $_24hr;

        return $this;
    }

    /**
     * Gets precip_sincelast
     * @return int
     */
    public function getPrecipSincelast()
    {
        return $this->container['precip_sincelast'];
    }

    /**
     * Sets precip_sincelast
     * @param int $precip_sincelast Liquid precipitation in inches since the last regular METAR
     * @return $this
     */
    public function setPrecipSincelast($precip_sincelast)
    {
        $this->container['precip_sincelast'] = $precip_sincelast;

        return $this;
    }

    /**
     * Gets precip_snow
     * @return int
     */
    public function getPrecipSnow()
    {
        return $this->container['precip_snow'];
    }

    /**
     * Sets precip_snow
     * @param int $precip_snow Snow depth on the ground (inches)
     * @return $this
     */
    public function setPrecipSnow($precip_snow)
    {
        $this->container['precip_snow'] = $precip_snow;

        return $this;
    }

    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param string $type Metar Type (METAR or SPECI)
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets elevation
     * @return string
     */
    public function getElevation()
    {
        return $this->container['elevation'];
    }

    /**
     * Sets elevation
     * @param string $elevation Reported Station Elevation (ft MSL)
     * @return $this
     */
    public function setElevation($elevation)
    {
        $this->container['elevation'] = $elevation;

        return $this;
    }

    /**
     * Gets raw
     * @return string
     */
    public function getRaw()
    {
        return $this->container['raw'];
    }

    /**
     * Sets raw
     * @param string $raw RAW Metar
     * @return $this
     */
    public function setRaw($raw)
    {
        $this->container['raw'] = $raw;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}
