<?php
/**
 * SIGMET
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Open Aviation Data
 *
 * Accessible Aviation Data for the Masses
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * SIGMET Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class SIGMET implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'SIGMET';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'icao' => 'string',
        'fir' => 'string',
        'fir_name' => 'string',
        'hazard' => 'string',
        'valid_from' => 'string',
        'valid_to' => 'string',
        'qualifier' => 'string',
        'geom' => 'string',
        'top' => 'int',
        'raw' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'icao' => 'icao',
        'fir' => 'fir',
        'fir_name' => 'fir_name',
        'hazard' => 'hazard',
        'valid_from' => 'valid_from',
        'valid_to' => 'valid_to',
        'qualifier' => 'qualifier',
        'geom' => 'geom',
        'top' => 'top',
        'raw' => 'raw'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'icao' => 'setIcao',
        'fir' => 'setFir',
        'fir_name' => 'setFirName',
        'hazard' => 'setHazard',
        'valid_from' => 'setValidFrom',
        'valid_to' => 'setValidTo',
        'qualifier' => 'setQualifier',
        'geom' => 'setGeom',
        'top' => 'setTop',
        'raw' => 'setRaw'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'icao' => 'getIcao',
        'fir' => 'getFir',
        'fir_name' => 'getFirName',
        'hazard' => 'getHazard',
        'valid_from' => 'getValidFrom',
        'valid_to' => 'getValidTo',
        'qualifier' => 'getQualifier',
        'geom' => 'getGeom',
        'top' => 'getTop',
        'raw' => 'getRaw'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['icao'] = isset($data['icao']) ? $data['icao'] : null;
        $this->container['fir'] = isset($data['fir']) ? $data['fir'] : null;
        $this->container['fir_name'] = isset($data['fir_name']) ? $data['fir_name'] : null;
        $this->container['hazard'] = isset($data['hazard']) ? $data['hazard'] : null;
        $this->container['valid_from'] = isset($data['valid_from']) ? $data['valid_from'] : null;
        $this->container['valid_to'] = isset($data['valid_to']) ? $data['valid_to'] : null;
        $this->container['qualifier'] = isset($data['qualifier']) ? $data['qualifier'] : null;
        $this->container['geom'] = isset($data['geom']) ? $data['geom'] : null;
        $this->container['top'] = isset($data['top']) ? $data['top'] : null;
        $this->container['raw'] = isset($data['raw']) ? $data['raw'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets icao
     * @return string
     */
    public function getIcao()
    {
        return $this->container['icao'];
    }

    /**
     * Sets icao
     * @param string $icao Applicable Station ICAO
     * @return $this
     */
    public function setIcao($icao)
    {
        $this->container['icao'] = $icao;

        return $this;
    }

    /**
     * Gets fir
     * @return string
     */
    public function getFir()
    {
        return $this->container['fir'];
    }

    /**
     * Sets fir
     * @param string $fir Issuing FIR Code
     * @return $this
     */
    public function setFir($fir)
    {
        $this->container['fir'] = $fir;

        return $this;
    }

    /**
     * Gets fir_name
     * @return string
     */
    public function getFirName()
    {
        return $this->container['fir_name'];
    }

    /**
     * Sets fir_name
     * @param string $fir_name Issuing FIR Name
     * @return $this
     */
    public function setFirName($fir_name)
    {
        $this->container['fir_name'] = $fir_name;

        return $this;
    }

    /**
     * Gets hazard
     * @return string
     */
    public function getHazard()
    {
        return $this->container['hazard'];
    }

    /**
     * Sets hazard
     * @param string $hazard Hazard Code
     * @return $this
     */
    public function setHazard($hazard)
    {
        $this->container['hazard'] = $hazard;

        return $this;
    }

    /**
     * Gets valid_from
     * @return string
     */
    public function getValidFrom()
    {
        return $this->container['valid_from'];
    }

    /**
     * Sets valid_from
     * @param string $valid_from Datetime SIGMET valid (ISO8601)
     * @return $this
     */
    public function setValidFrom($valid_from)
    {
        $this->container['valid_from'] = $valid_from;

        return $this;
    }

    /**
     * Gets valid_to
     * @return string
     */
    public function getValidTo()
    {
        return $this->container['valid_to'];
    }

    /**
     * Sets valid_to
     * @param string $valid_to Datetime SIGMETT expires (ISO8601)
     * @return $this
     */
    public function setValidTo($valid_to)
    {
        $this->container['valid_to'] = $valid_to;

        return $this;
    }

    /**
     * Gets qualifier
     * @return string
     */
    public function getQualifier()
    {
        return $this->container['qualifier'];
    }

    /**
     * Sets qualifier
     * @param string $qualifier Qualifier Code
     * @return $this
     */
    public function setQualifier($qualifier)
    {
        $this->container['qualifier'] = $qualifier;

        return $this;
    }

    /**
     * Gets geom
     * @return string
     */
    public function getGeom()
    {
        return $this->container['geom'];
    }

    /**
     * Sets geom
     * @param string $geom SIGMET Geography Type (can be AREA, POINT, EMBD, UKN)
     * @return $this
     */
    public function setGeom($geom)
    {
        $this->container['geom'] = $geom;

        return $this;
    }

    /**
     * Gets top
     * @return int
     */
    public function getTop()
    {
        return $this->container['top'];
    }

    /**
     * Sets top
     * @param int $top Top of SIGMET (feet MSL)
     * @return $this
     */
    public function setTop($top)
    {
        $this->container['top'] = $top;

        return $this;
    }

    /**
     * Gets raw
     * @return string
     */
    public function getRaw()
    {
        return $this->container['raw'];
    }

    /**
     * Sets raw
     * @param string $raw RAW Sigmet Text
     * @return $this
     */
    public function setRaw($raw)
    {
        $this->container['raw'] = $raw;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}
