<?php
/**
 * TAFForecasts
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Open Aviation Data
 *
 * Accessible Aviation Data for the Masses
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * TAFForecasts Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class TAFForecasts implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'TAF_forecasts';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'valid' => 'object',
        'indicator' => 'string',
        'becoming' => 'string',
        'probability' => 'int',
        'wind' => '\Swagger\Client\Model\TAFForecastsWind',
        'visibility' => 'string',
        'altimeter' => 'string',
        'wx_string' => 'string',
        'no_decoded' => 'string',
        'sky' => '\Swagger\Client\Model\SkyConditions[]',
        'turbulence' => '\Swagger\Client\Model\Turbulence[]',
        'icing' => '\Swagger\Client\Model\Icing[]',
        'tmp' => '\Swagger\Client\Model\TAFForecastsTmp'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'valid' => 'valid',
        'indicator' => 'indicator',
        'becoming' => 'becoming',
        'probability' => 'probability',
        'wind' => 'wind',
        'visibility' => 'visibility',
        'altimeter' => 'altimeter',
        'wx_string' => 'wx_string',
        'no_decoded' => 'no_decoded',
        'sky' => 'sky',
        'turbulence' => 'turbulence',
        'icing' => 'icing',
        'tmp' => 'tmp'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'valid' => 'setValid',
        'indicator' => 'setIndicator',
        'becoming' => 'setBecoming',
        'probability' => 'setProbability',
        'wind' => 'setWind',
        'visibility' => 'setVisibility',
        'altimeter' => 'setAltimeter',
        'wx_string' => 'setWxString',
        'no_decoded' => 'setNoDecoded',
        'sky' => 'setSky',
        'turbulence' => 'setTurbulence',
        'icing' => 'setIcing',
        'tmp' => 'setTmp'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'valid' => 'getValid',
        'indicator' => 'getIndicator',
        'becoming' => 'getBecoming',
        'probability' => 'getProbability',
        'wind' => 'getWind',
        'visibility' => 'getVisibility',
        'altimeter' => 'getAltimeter',
        'wx_string' => 'getWxString',
        'no_decoded' => 'getNoDecoded',
        'sky' => 'getSky',
        'turbulence' => 'getTurbulence',
        'icing' => 'getIcing',
        'tmp' => 'getTmp'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['valid'] = isset($data['valid']) ? $data['valid'] : null;
        $this->container['indicator'] = isset($data['indicator']) ? $data['indicator'] : null;
        $this->container['becoming'] = isset($data['becoming']) ? $data['becoming'] : null;
        $this->container['probability'] = isset($data['probability']) ? $data['probability'] : null;
        $this->container['wind'] = isset($data['wind']) ? $data['wind'] : null;
        $this->container['visibility'] = isset($data['visibility']) ? $data['visibility'] : null;
        $this->container['altimeter'] = isset($data['altimeter']) ? $data['altimeter'] : null;
        $this->container['wx_string'] = isset($data['wx_string']) ? $data['wx_string'] : null;
        $this->container['no_decoded'] = isset($data['no_decoded']) ? $data['no_decoded'] : null;
        $this->container['sky'] = isset($data['sky']) ? $data['sky'] : null;
        $this->container['turbulence'] = isset($data['turbulence']) ? $data['turbulence'] : null;
        $this->container['icing'] = isset($data['icing']) ? $data['icing'] : null;
        $this->container['tmp'] = isset($data['tmp']) ? $data['tmp'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets valid
     * @return object
     */
    public function getValid()
    {
        return $this->container['valid'];
    }

    /**
     * Sets valid
     * @param object $valid
     * @return $this
     */
    public function setValid($valid)
    {
        $this->container['valid'] = $valid;

        return $this;
    }

    /**
     * Gets indicator
     * @return string
     */
    public function getIndicator()
    {
        return $this->container['indicator'];
    }

    /**
     * Sets indicator
     * @param string $indicator Forecast change indicator (can be TEMPO, BECMG, FM, PROB)
     * @return $this
     */
    public function setIndicator($indicator)
    {
        $this->container['indicator'] = $indicator;

        return $this;
    }

    /**
     * Gets becoming
     * @return string
     */
    public function getBecoming()
    {
        return $this->container['becoming'];
    }

    /**
     * Sets becoming
     * @param string $becoming Datetime becoming (ISO8601)
     * @return $this
     */
    public function setBecoming($becoming)
    {
        $this->container['becoming'] = $becoming;

        return $this;
    }

    /**
     * Gets probability
     * @return int
     */
    public function getProbability()
    {
        return $this->container['probability'];
    }

    /**
     * Sets probability
     * @param int $probability Probability in becoming (Percentage)
     * @return $this
     */
    public function setProbability($probability)
    {
        $this->container['probability'] = $probability;

        return $this;
    }

    /**
     * Gets wind
     * @return \Swagger\Client\Model\TAFForecastsWind
     */
    public function getWind()
    {
        return $this->container['wind'];
    }

    /**
     * Sets wind
     * @param \Swagger\Client\Model\TAFForecastsWind $wind
     * @return $this
     */
    public function setWind($wind)
    {
        $this->container['wind'] = $wind;

        return $this;
    }

    /**
     * Gets visibility
     * @return string
     */
    public function getVisibility()
    {
        return $this->container['visibility'];
    }

    /**
     * Sets visibility
     * @param string $visibility Horizontal visibility (SM)
     * @return $this
     */
    public function setVisibility($visibility)
    {
        $this->container['visibility'] = $visibility;

        return $this;
    }

    /**
     * Gets altimeter
     * @return string
     */
    public function getAltimeter()
    {
        return $this->container['altimeter'];
    }

    /**
     * Sets altimeter
     * @param string $altimeter Altimeter (inches of Hg)
     * @return $this
     */
    public function setAltimeter($altimeter)
    {
        $this->container['altimeter'] = $altimeter;

        return $this;
    }

    /**
     * Gets wx_string
     * @return string
     */
    public function getWxString()
    {
        return $this->container['wx_string'];
    }

    /**
     * Sets wx_string
     * @param string $wx_string WX String Descriptions
     * @return $this
     */
    public function setWxString($wx_string)
    {
        $this->container['wx_string'] = $wx_string;

        return $this;
    }

    /**
     * Gets no_decoded
     * @return string
     */
    public function getNoDecoded()
    {
        return $this->container['no_decoded'];
    }

    /**
     * Sets no_decoded
     * @param string $no_decoded Indicates what is not decoded
     * @return $this
     */
    public function setNoDecoded($no_decoded)
    {
        $this->container['no_decoded'] = $no_decoded;

        return $this;
    }

    /**
     * Gets sky
     * @return \Swagger\Client\Model\SkyConditions[]
     */
    public function getSky()
    {
        return $this->container['sky'];
    }

    /**
     * Sets sky
     * @param \Swagger\Client\Model\SkyConditions[] $sky
     * @return $this
     */
    public function setSky($sky)
    {
        $this->container['sky'] = $sky;

        return $this;
    }

    /**
     * Gets turbulence
     * @return \Swagger\Client\Model\Turbulence[]
     */
    public function getTurbulence()
    {
        return $this->container['turbulence'];
    }

    /**
     * Sets turbulence
     * @param \Swagger\Client\Model\Turbulence[] $turbulence
     * @return $this
     */
    public function setTurbulence($turbulence)
    {
        $this->container['turbulence'] = $turbulence;

        return $this;
    }

    /**
     * Gets icing
     * @return \Swagger\Client\Model\Icing[]
     */
    public function getIcing()
    {
        return $this->container['icing'];
    }

    /**
     * Sets icing
     * @param \Swagger\Client\Model\Icing[] $icing
     * @return $this
     */
    public function setIcing($icing)
    {
        $this->container['icing'] = $icing;

        return $this;
    }

    /**
     * Gets tmp
     * @return \Swagger\Client\Model\TAFForecastsTmp
     */
    public function getTmp()
    {
        return $this->container['tmp'];
    }

    /**
     * Sets tmp
     * @param \Swagger\Client\Model\TAFForecastsTmp $tmp
     * @return $this
     */
    public function setTmp($tmp)
    {
        $this->container['tmp'] = $tmp;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}
