<?php
/**
 * AircraftAircraft
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Open Aviation Data
 *
 * Accessible Aviation Data for the Masses
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * AircraftAircraft Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class AircraftAircraft implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Aircraft_aircraft';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
        'icao' => 'string',
        'wtc' => 'string',
        'manufacturer' => 'string',
        'type' => 'string',
        'apc' => 'string',
        'wingspan' => 'string',
        'height' => 'string',
        'length' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'icao' => 'icao',
        'wtc' => 'wtc',
        'manufacturer' => 'manufacturer',
        'type' => 'type',
        'apc' => 'apc',
        'wingspan' => 'wingspan',
        'height' => 'height',
        'length' => 'length'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'icao' => 'setIcao',
        'wtc' => 'setWtc',
        'manufacturer' => 'setManufacturer',
        'type' => 'setType',
        'apc' => 'setApc',
        'wingspan' => 'setWingspan',
        'height' => 'setHeight',
        'length' => 'setLength'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'icao' => 'getIcao',
        'wtc' => 'getWtc',
        'manufacturer' => 'getManufacturer',
        'type' => 'getType',
        'apc' => 'getApc',
        'wingspan' => 'getWingspan',
        'height' => 'getHeight',
        'length' => 'getLength'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['icao'] = isset($data['icao']) ? $data['icao'] : null;
        $this->container['wtc'] = isset($data['wtc']) ? $data['wtc'] : null;
        $this->container['manufacturer'] = isset($data['manufacturer']) ? $data['manufacturer'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['apc'] = isset($data['apc']) ? $data['apc'] : null;
        $this->container['wingspan'] = isset($data['wingspan']) ? $data['wingspan'] : null;
        $this->container['height'] = isset($data['height']) ? $data['height'] : null;
        $this->container['length'] = isset($data['length']) ? $data['length'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name Name
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets icao
     * @return string
     */
    public function getIcao()
    {
        return $this->container['icao'];
    }

    /**
     * Sets icao
     * @param string $icao ICAO Code
     * @return $this
     */
    public function setIcao($icao)
    {
        $this->container['icao'] = $icao;

        return $this;
    }

    /**
     * Gets wtc
     * @return string
     */
    public function getWtc()
    {
        return $this->container['wtc'];
    }

    /**
     * Sets wtc
     * @param string $wtc Weight Category
     * @return $this
     */
    public function setWtc($wtc)
    {
        $this->container['wtc'] = $wtc;

        return $this;
    }

    /**
     * Gets manufacturer
     * @return string
     */
    public function getManufacturer()
    {
        return $this->container['manufacturer'];
    }

    /**
     * Sets manufacturer
     * @param string $manufacturer Manufacturer Name
     * @return $this
     */
    public function setManufacturer($manufacturer)
    {
        $this->container['manufacturer'] = $manufacturer;

        return $this;
    }

    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param string $type Type Code
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets apc
     * @return string
     */
    public function getApc()
    {
        return $this->container['apc'];
    }

    /**
     * Sets apc
     * @param string $apc Approach Speed Categorization
     * @return $this
     */
    public function setApc($apc)
    {
        $this->container['apc'] = $apc;

        return $this;
    }

    /**
     * Gets wingspan
     * @return string
     */
    public function getWingspan()
    {
        return $this->container['wingspan'];
    }

    /**
     * Sets wingspan
     * @param string $wingspan Wingspan (meters)
     * @return $this
     */
    public function setWingspan($wingspan)
    {
        $this->container['wingspan'] = $wingspan;

        return $this;
    }

    /**
     * Gets height
     * @return string
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     * @param string $height Height (meters)
     * @return $this
     */
    public function setHeight($height)
    {
        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets length
     * @return string
     */
    public function getLength()
    {
        return $this->container['length'];
    }

    /**
     * Sets length
     * @param string $length Length (meters)
     * @return $this
     */
    public function setLength($length)
    {
        $this->container['length'] = $length;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}
