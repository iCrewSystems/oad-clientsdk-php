<?php
/**
 * TAFApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Open Aviation Data
 *
 * Accessible Aviation Data for the Masses
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * TAFApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TAFApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('http://v3.openaviationdata.com/api');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return TAFApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation weatherTafRadiusGet
     *
     * TAF by Station in Radius from Centerpoint
     *
     * @param string $lat Latitude of centerpoint (Decimal Degrees) (required)
     * @param string $lon Longitude of centerpoint (Decimal Degrees) (required)
     * @param string $radius Radius to search within (Statute Miles) (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\TAF[]
     */
    public function weatherTafRadiusGet($lat, $lon, $radius)
    {
        list($response) = $this->weatherTafRadiusGetWithHttpInfo($lat, $lon, $radius);
        return $response;
    }

    /**
     * Operation weatherTafRadiusGetWithHttpInfo
     *
     * TAF by Station in Radius from Centerpoint
     *
     * @param string $lat Latitude of centerpoint (Decimal Degrees) (required)
     * @param string $lon Longitude of centerpoint (Decimal Degrees) (required)
     * @param string $radius Radius to search within (Statute Miles) (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\TAF[], HTTP status code, HTTP response headers (array of strings)
     */
    public function weatherTafRadiusGetWithHttpInfo($lat, $lon, $radius)
    {
        // verify the required parameter 'lat' is set
        if ($lat === null) {
            throw new \InvalidArgumentException('Missing the required parameter $lat when calling weatherTafRadiusGet');
        }
        // verify the required parameter 'lon' is set
        if ($lon === null) {
            throw new \InvalidArgumentException('Missing the required parameter $lon when calling weatherTafRadiusGet');
        }
        // verify the required parameter 'radius' is set
        if ($radius === null) {
            throw new \InvalidArgumentException('Missing the required parameter $radius when calling weatherTafRadiusGet');
        }
        // parse inputs
        $resourcePath = "/weather/taf/radius";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($lat !== null) {
            $queryParams['lat'] = $this->apiClient->getSerializer()->toQueryValue($lat);
        }
        // query params
        if ($lon !== null) {
            $queryParams['lon'] = $this->apiClient->getSerializer()->toQueryValue($lon);
        }
        // query params
        if ($radius !== null) {
            $queryParams['radius'] = $this->apiClient->getSerializer()->toQueryValue($radius);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TAF[]',
                '/weather/taf/radius'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TAF[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TAF[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation weatherTafRectangleGet
     *
     * TAF by Station in Rectangular Zone
     *
     * @param string $minlat Minimum latitude to make rectangular (Decimal Degrees) (required)
     * @param string $maxlat Maxiumum latitude to make rectangular (Decimal Degrees) (required)
     * @param string $minlon Minimum longitude to make rectangular (Decimal Degrees) (required)
     * @param string $maxlon Maxiumum longitude to make rectangular (Decimal Degrees) (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\TAF[]
     */
    public function weatherTafRectangleGet($minlat, $maxlat, $minlon, $maxlon)
    {
        list($response) = $this->weatherTafRectangleGetWithHttpInfo($minlat, $maxlat, $minlon, $maxlon);
        return $response;
    }

    /**
     * Operation weatherTafRectangleGetWithHttpInfo
     *
     * TAF by Station in Rectangular Zone
     *
     * @param string $minlat Minimum latitude to make rectangular (Decimal Degrees) (required)
     * @param string $maxlat Maxiumum latitude to make rectangular (Decimal Degrees) (required)
     * @param string $minlon Minimum longitude to make rectangular (Decimal Degrees) (required)
     * @param string $maxlon Maxiumum longitude to make rectangular (Decimal Degrees) (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\TAF[], HTTP status code, HTTP response headers (array of strings)
     */
    public function weatherTafRectangleGetWithHttpInfo($minlat, $maxlat, $minlon, $maxlon)
    {
        // verify the required parameter 'minlat' is set
        if ($minlat === null) {
            throw new \InvalidArgumentException('Missing the required parameter $minlat when calling weatherTafRectangleGet');
        }
        // verify the required parameter 'maxlat' is set
        if ($maxlat === null) {
            throw new \InvalidArgumentException('Missing the required parameter $maxlat when calling weatherTafRectangleGet');
        }
        // verify the required parameter 'minlon' is set
        if ($minlon === null) {
            throw new \InvalidArgumentException('Missing the required parameter $minlon when calling weatherTafRectangleGet');
        }
        // verify the required parameter 'maxlon' is set
        if ($maxlon === null) {
            throw new \InvalidArgumentException('Missing the required parameter $maxlon when calling weatherTafRectangleGet');
        }
        // parse inputs
        $resourcePath = "/weather/taf/rectangle";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($minlat !== null) {
            $queryParams['minlat'] = $this->apiClient->getSerializer()->toQueryValue($minlat);
        }
        // query params
        if ($maxlat !== null) {
            $queryParams['maxlat'] = $this->apiClient->getSerializer()->toQueryValue($maxlat);
        }
        // query params
        if ($minlon !== null) {
            $queryParams['minlon'] = $this->apiClient->getSerializer()->toQueryValue($minlon);
        }
        // query params
        if ($maxlon !== null) {
            $queryParams['maxlon'] = $this->apiClient->getSerializer()->toQueryValue($maxlon);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TAF[]',
                '/weather/taf/rectangle'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TAF[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TAF[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation weatherTafStationGet
     *
     * TAF by Station
     *
     * @param string $icao Station Identifier (Weather Station or Airport) (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\TAF[]
     */
    public function weatherTafStationGet($icao)
    {
        list($response) = $this->weatherTafStationGetWithHttpInfo($icao);
        return $response;
    }

    /**
     * Operation weatherTafStationGetWithHttpInfo
     *
     * TAF by Station
     *
     * @param string $icao Station Identifier (Weather Station or Airport) (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\TAF[], HTTP status code, HTTP response headers (array of strings)
     */
    public function weatherTafStationGetWithHttpInfo($icao)
    {
        // verify the required parameter 'icao' is set
        if ($icao === null) {
            throw new \InvalidArgumentException('Missing the required parameter $icao when calling weatherTafStationGet');
        }
        // parse inputs
        $resourcePath = "/weather/taf/station";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($icao !== null) {
            $queryParams['icao'] = $this->apiClient->getSerializer()->toQueryValue($icao);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TAF[]',
                '/weather/taf/station'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TAF[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TAF[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
